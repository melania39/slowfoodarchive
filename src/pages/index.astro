---
import Airtable from 'airtable';

// Configura Airtable
const base = new Airtable({
  apiKey: import.meta.env.PUBLIC_AIRTABLE_API_KEY
}).base(import.meta.env.PUBLIC_AIRTABLE_BASE_ID);

// Recupera i dati
let items = [];
try {
  const records = await base(import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME)
    .select({ maxRecords: 100 })
    .all();
 
  items = records.map(record => ({
    id: record.id,
    name: record.fields.Name,
    description: record.fields.Description,
    category: record.fields.Category,
    region: record.fields.Region,
    seasonality: record.fields.Seasonality, // Es: "September, October, November"
    producers: record.fields.Producers,
    image: record.fields.Image?.[0]?.url,
  }));
} catch (error) {
  console.error('Errore caricamento dati:', error);
}

const titolo = "Slow Food Archive";

// --- NUOVA MODIFICA: Filtro per la stagionalità ---

// 1. Ottieni il nome del mese corrente in inglese (es. "October")
const today = new Date();
const currentMonthName = today.toLocaleString('en-US', { month: 'long' });

// 2. Filtra l'array 'items' per tenere solo quelli di stagione
const seasonalItems = items.filter(item => {
  // Controlla se il campo 'seasonality' esiste e se include il nome del mese corrente
  return item.seasonality && item.seasonality.includes(currentMonthName);
});
// --- FINE NUOVA MODIFICA ---

---

<html lang="it">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{titolo}</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700;900&display=swap" rel="stylesheet">
    <style>
      :root {
        --card-size: 180px;
      }
    
      body {
        background-color: #401919;
        color: #fff;
        font-family: 'Montserrat', sans-serif;
        margin: 0;
        height: 100vh;
        width: 100vw;
        overflow: hidden; 
        cursor: none;
      }
      
      .custom-cursor {
        position: fixed;
        width: 25px;
        height: 25px;
        border: 2px solid rgba(255, 255, 255, 0.8);
        border-radius: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none;
        z-index: 9999;
        transition: transform 0.15s ease-out;
      }
      
      .trail-element {
        position: fixed;
        opacity: 0; 
        width: 10px;
        height: 10px;
        background-color: rgba(255, 255, 255, 0.4);
        border-radius: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none;
        z-index: 9998;
      }
    
      #current-date-container {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        font-size: clamp(8rem, 35vw, 40rem);
        font-weight: 900;
        line-height: 0.8;
        letter-spacing: -0.05em;
        color: rgba(255, 255, 255, 0.8);
        z-index: 1;
        user-select: none;
        pointer-events: none; 
        white-space: nowrap;
      }
    
      .grid {
        position: relative;
        width: 100%;
        height: 80%;
        z-index: 2;
      }
    
      .card {
        position: absolute;
        width: var(--card-size);
        height: var(--card-size);
        cursor: none;
        transition: transform 0.3s ease;
      }
    
      .card:hover { transform: scale(1.1); }
      .card img { width: 100%; height: 100%; object-fit: cover; filter: grayscale(100%) brightness(40%); transition: filter 0.4s ease-in-out; }
      .card:hover img { filter: grayscale(0%) brightness(100%); }
      .card-details { display: none; position: absolute; top: 50%; left: 50%; background-color: rgba(15, 15, 15, 0.95); padding: 1.5rem; border-radius: 8px; border: 1px solid rgba(255, 255, 255, 0.1); width: 320px; z-index: 10; color: #eee; text-align: left; opacity: 0; visibility: hidden; transform: translate(-50%, -50%) scale(0.95); transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease; }
      .card-details.visible { display: block; opacity: 1; visibility: visible; transform: translate(-50%, -50%) scale(1); }
      .card-details h3 { margin-top: 0; font-size: 1.5rem; font-weight: 700; }
      .card-details p, .card-details span { font-size: 1rem; line-height: 1.5; margin-bottom: 0.5rem; }
      .category { display: inline-block; padding: 0.2em 0.6em; background-color: #555; border-radius: 4px; font-size: 0.8rem; margin-bottom: 1rem; text-transform: uppercase; }
    </style>
</head>
<body>
    
    <div class="custom-cursor"></div>
    <div id="current-date-container"></div>

    <div class="grid">
      {/* MODIFICA: Usa l'array filtrato 'seasonalItems' invece di 'items' */}
      {seasonalItems.map(item => (
        <div class="card">
          {item.image && <img src={item.image} alt={item.name} />}
          
          <div class="card-details">
            <h3>{item.name}</h3>
            {item.category && <span class="category">{item.category}</span>}
            <p>{item.description}</p>
            <p><strong>Seasonality:</strong> {item.seasonality}</p>
            <p><strong>Region:</strong> {item.region}</p>
            <p><strong>Producers:</strong> {item.producers}</p>
          </div>
        </div>
      ))}
    </div>

<!-- Form contributo -->
<details class="contribute-section">
  <summary>Vuoi contribuire all'archivio?</summary>
 
  <form id="contribute-form" class="contribute-form">
    <div class="form-group">
      <label for="name">Name *</label>
      <input type="text" id="name" name="name" required>
    </div>
   
    <div class="form-group">
      <label for="description">Description *</label>
      <textarea id="description" name="description" rows="4" required></textarea>
    </div>
   
    <div class="form-group">
      <label for="category">Categoria</label>
      <select id="category" name="category">
        <option value="">Seleziona...</option>
        <option value="Neri">Neri</option>
        <option value="Siamesi">Siamesi</option>
        <option value="Europei">Europei</option>
        <option value="Altro">Altro</option>
      </select>
    </div>
   
    <div class="form-group">
      <label for="image-url">URL Immagine</label>
  <input
    type="url"
    id="image-url"
    name="imageUrl"
    placeholder="https://esempio.com/immagine.jpg">
  <small>Inserisci il link di un'immagine già online (es: da Unsplash, Imgur, etc.)</small>
    </div>
   
    <button type="submit" class="submit-btn">Invia contributo</button>
    <div id="form-message" class="form-message"></div>
  </form>
</details>
      
    </div>

    <script>// FORM CONTRIBUTO
      document.getElementById('contribute-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
       
        const submitBtn = e.target.querySelector('.submit-btn');
        const messageDiv = document.getElementById('form-message');
       
        submitBtn.disabled = true;
        submitBtn.textContent = 'Invio in corso...';
        messageDiv.style.display = 'none';
       
        // Raccogli dati dal form
        const imageUrl = document.getElementById('image-url').value.trim();
       
        const formData = {
          Name: document.getElementById('name').value,
          Description: document.getElementById('description').value,
          Category: document.getElementById('category').value,
        };
       
        // IMPORTANTE: Aggiungi Image solo se c'è un URL valido
        if (imageUrl) {
          formData.Image = [
            {
              url: imageUrl
            }
          ];
        }
       
        console.log('Dati da inviare:', formData);
       
        try {
          const response = await fetch(`https://api.airtable.com/v0/${import.meta.env.PUBLIC_AIRTABLE_BASE_ID}/${import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME}`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${import.meta.env.PUBLIC_AIRTABLE_API_KEY}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              fields: formData
            })
          });
         
          const responseData = await response.json();
          console.log('Risposta Airtable:', responseData);
         
          if (response.ok) {
            messageDiv.textContent = '✅ Contributo inviato con successo! Ricarica la pagina per vederlo.';
            messageDiv.className = 'form-message success';
            e.target.reset();
          } else {
            console.error('Errore Airtable:', responseData);
            messageDiv.textContent = `❌ Errore: ${responseData.error?.message || 'Errore sconosciuto'}`;
            messageDiv.className = 'form-message error';
          }
        } catch (error) {
          console.error('Errore generale:', error);
          messageDiv.textContent = '❌ Errore durante l\'invio. Riprova.';
          messageDiv.className = 'form-message error';
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Invia contributo';
        }
      });
      </script>



<script>
  document.addEventListener('DOMContentLoaded', () => {
    
    // Logica per cursore e scia (invariata)
    const cursor = document.querySelector('.custom-cursor');
    window.addEventListener('mousemove', e => {
        cursor.style.top = e.clientY + 'px';
        cursor.style.left = e.clientX + 'px';
    });

    const trailCount = 20;
    const trailElements = [];
    let currentTrailIndex = 0;
    for (let i = 0; i < trailCount; i++) {
        const el = document.createElement('div');
        el.classList.add('trail-element');
        document.body.appendChild(el);
        trailElements.push(el);
    }
    window.addEventListener('mousemove', e => {
        const trailEl = trailElements[currentTrailIndex];
        currentTrailIndex = (currentTrailIndex + 1) % trailCount;
        trailEl.style.left = e.clientX + 'px';
        trailEl.style.top = e.clientY + 'px';
        trailEl.style.transition = 'none';
        trailEl.style.opacity = '1';
        trailEl.style.transform = 'translate(-50%, -50%) scale(1)';
        setTimeout(() => {
            trailEl.style.transition = 'opacity 1.5s ease-out, transform 1.5s ease-out';
            trailEl.style.opacity = '0';
            trailEl.style.transform = 'translate(-50%, -50%) scale(0)';
        }, 10);
    });

    // Logica per data e immagini (invariata)
    const dateContainer = document.getElementById('current-date-container');
    const today = new Date();
    const day = today.getDate();
    const month = today.toLocaleDateString('en-US', { month: 'short' }).toUpperCase();
    dateContainer.textContent = `${day} ${month}`;

    const cards = document.querySelectorAll('.card');
    const grid = document.querySelector('.grid');
    const gridWidth = grid.offsetWidth;
    const gridHeight = grid.offsetHeight;
    const cardSize = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--card-size'));
    const margin = 50;

    cards.forEach(card => {
        const availableWidth = gridWidth - cardSize - (margin * 2);
        const availableHeight = gridHeight - cardSize - (margin * 2);
        const randomX = margin + (Math.random() * availableWidth);
        const randomY = margin + (Math.random() * availableHeight);
        card.style.top = `${randomY}px`;
        card.style.left = `${randomX}px`;
    });

    cards.forEach(card => {
        const details = card.querySelector('.card-details');
        const image = card.querySelector('img');
        card.addEventListener('click', (event) => {
            event.stopPropagation(); 
            document.querySelectorAll('.card-details.visible').forEach(visibleDetail => {
                if (visibleDetail !== details) {
                    visibleDetail.classList.remove('visible');
                    visibleDetail.closest('.card').querySelector('img').style.filter = 'grayscale(100%) brightness(40%)';
                }
            });
            const isVisible = details.classList.toggle('visible');
            image.style.filter = isVisible ? 'grayscale(0%) brightness(100%)' : 'grayscale(100%) brightness(40%)';
        });
    });

    document.body.addEventListener('click', () => {
        document.querySelectorAll('.card-details.visible').forEach(visibleDetail => {
            visibleDetail.classList.remove('visible');
            visibleDetail.closest('.card').querySelector('img').style.filter = 'grayscale(100%) brightness(40%)';
        });
    });
  });
</script>

</body>
</html>